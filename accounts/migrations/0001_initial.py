# Generated by Django 4.2.23 on 2025-08-18 10:18

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('reference', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('last_name', models.CharField(max_length=255, null=True)),
                ('first_name', models.CharField(max_length=255, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('country', django_countries.fields.CountryField(max_length=255)),
                ('city', models.CharField(max_length=255, null=True)),
                ('phone', models.CharField(max_length=255)),
                ('is_blocked', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACTIVE', 'Active'), ('SUSPENDED', 'Suspended')], default='PENDING', max_length=12)),
                ('rating', models.DecimalField(decimal_places=2, default=5.0, max_digits=3)),
                ('kyc_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='Groups this driver belongs to.', related_name='driver_set', related_query_name='driver', to='auth.group', verbose_name='groups')),
            ],
            options={
                'permissions': [('can_add_driver', 'Can add driver'), ('can_view_driver', 'Can view driver'), ('can_update_driver', 'Can update driver'), ('can_delete_driver', 'Can delete driver')],
                'default_permissions': (),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PartnerCompany',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('country', models.CharField(max_length=2)),
                ('payout_currency', models.CharField(default='EUR', max_length=3)),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'permissions': [('can_add_company', 'Can add company'), ('can_view_company', 'Can view company'), ('can_update_company', 'Can update company'), ('can_delete_company', 'Can delete company')],
                'default_permissions': (),
            },
        ),
        migrations.CreateModel(
            name='DriverDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('file', models.FileField(upload_to='driver_docs/')),
                ('expires_at', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('driver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='accounts.driver')),
            ],
            options={
                'permissions': [('can_add_driver_doc', 'Can add driver document'), ('can_view_driver_doc', 'Can view driver document'), ('can_update_driver_doc', 'Can update driver document'), ('can_delete_driver_doc', 'Can delete driver document')],
                'default_permissions': (),
            },
        ),
        migrations.AddField(
            model_name='driver',
            name='partner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drivers', to='accounts.partnercompany'),
        ),
        migrations.AddField(
            model_name='driver',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this driver.', related_name='driver_set', related_query_name='driver', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_name', models.CharField(max_length=255, null=True)),
                ('first_name', models.CharField(max_length=255, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('country', django_countries.fields.CountryField(max_length=255)),
                ('city', models.CharField(max_length=255, null=True)),
                ('phone', models.CharField(max_length=255)),
                ('is_blocked', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='Groups this customer belongs to.', related_name='customer_set', related_query_name='customer', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this customer.', related_name='customer_set', related_query_name='customer', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'permissions': [('can_add_customer', 'Can add customer'), ('can_view_customer', 'Can view customer'), ('can_update_customer', 'Can update customer'), ('can_delete_customer', 'Can delete customer')],
                'default_permissions': (),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
